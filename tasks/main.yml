---
- name: Install Python Packages
  pip:
    name: "{{item.name}}"
    state: "{{item.state}}"
    executable: pip3
  vars:
    packages:
    - name: pymongo
      state: present
  with_items: "{{ packages }}"
  tags:
  - asbrl-mongodb

- name: Install Packages
  apt:
    name: "{{item.name}}"
    state: "{{item.state}}"
  vars:
    packages:
    - name: mongodb-clients
      state: present
  with_items: "{{ packages }}"
  tags:
  - asbrl-mongodb

- name: Create MongoDB directory
  file:
    path: /home/{{ default_user }}/{{ CONTAINER_NAME }}/certificates
    state: directory
    mode: 0755
  tags:
  - asbrl-mongodb

- name: MongoDB Data Volume
  docker_volume:
    name: "{{ CONTAINER_NAME }}_data"
    state: "{{ VOLUME_STATE }}"
  tags:
  - asbrl-mongodb

- name: MongoDB config file
  template:
    src: mongod.conf.j2
    dest: /home/{{ default_user }}/{{ CONTAINER_NAME }}/mongod.conf
    mode: 0644
  tags:
  - asbrl-mongodb

- name: Start MongoDB Container (without Replica Set)
  docker_container:
    name: "{{ CONTAINER_NAME }}"
    image: "mongo:{{ BUILD }}"
    pull: "true"
    recreate: "yes"
    env:
      MONGO_INITDB_ROOT_USERNAME: "{{ ROOT_USERNAME | default(omit)}}}"
      MONGO_INITDB_ROOT_PASSWORD: "{{ ROOT_PASSWORD | default(omit)}}}"
    cpu_period: "{{ DOCKER_CPU_PERIOD }}"
    cpu_quota: "{{ DOCKER_CPU_QUOTA }}"
    memory: "{{ DOCKER_MEMORY }}"
    state: "{{ CONTAINER_STATE }}"
    log_driver: "{{ DOCKER_LOG_DRIVER }}"
    log_options: "{{ DOCKER_LOG_OPTIONS }}"
    restart_policy: "unless-stopped"
    published_ports:
      - "0.0.0.0:{{ NET_PORT }}:{{ NET_PORT }}"
    volumes:
      - '{{ CONTAINER_NAME }}_data:/data/db'
  when: REPLICA == 'none'
  tags:
  - asbrl-mongodb

- name: Init MongoDB Container Replica Set
  docker_container:
    name: "{{ CONTAINER_NAME }}"
    image: "mongo:{{ BUILD }}"
    command:
      - "--replSet {{ REPLICATION_NAME }}"
    pull: "true"
    recreate: "yes"
    env:
      MONGO_INITDB_ROOT_USERNAME: "{{ ROOT_USERNAME }}"
      MONGO_INITDB_ROOT_PASSWORD: "{{ ROOT_PASSWORD }}"
    cpu_period: "{{ DOCKER_CPU_PERIOD }}"
    cpu_quota: "{{ DOCKER_CPU_QUOTA }}"
    memory: "{{ DOCKER_MEMORY }}"
    state: "{{ CONTAINER_STATE }}"
    log_driver: "{{ DOCKER_LOG_DRIVER }}"
    log_options: "{{ DOCKER_LOG_OPTIONS }}"
    restart_policy: "unless-stopped"
    published_ports:
      - "0.0.0.0:{{ NET_PORT }}:{{ NET_PORT }}"
    volumes:
      - '{{ CONTAINER_NAME }}_data:/data/db'
  when: REPLICA != 'none'
  tags:
  - asbrl-mongodb

- name: Wait until MongoDB is running
  wait_for:
    port: "{{ NET_PORT }}"
    delay: 5
  when: REPLICA != 'none' and CONTAINER_STATE != 'absent'
  tags:
  - asbrl-mongodb

- name: Config MongoDB Standalone Replica Set
  mongodb_replicaset:
    #login_host: "{{ SERVER_IP }}"
    login_port: "{{ NET_PORT }}"
    login_user: "{{ ROOT_USERNAME }}"
    login_password: "{{ ROOT_PASSWORD }}"
    login_database: admin
    replica_set: "{{ REPLICATION_NAME }}"
    members: "{{ SERVER_IP }}:{{ NET_PORT }}"
    validate: no
  when: REPLICA == 'master' and CONTAINER_STATE != 'absent'
  tags:
  - asbrl-mongodb

- name: Start MongoDB Container
  docker_container:
    name: "{{ CONTAINER_NAME }}"
    image: "mongo:{{ BUILD }}"
    command:
      - "--config /etc/mongo/mongod.conf"
    pull: "true"
    recreate: "yes"
    cpu_period: "{{ DOCKER_CPU_PERIOD }}"
    cpu_quota: "{{ DOCKER_CPU_QUOTA }}"
    memory: "{{ DOCKER_MEMORY }}"
    state: "{{ CONTAINER_STATE }}"
    log_driver: "{{ DOCKER_LOG_DRIVER }}"
    log_options: "{{ DOCKER_LOG_OPTIONS }}"
    restart_policy: "unless-stopped"
    published_ports:
      - "0.0.0.0:{{ NET_PORT }}:{{ NET_PORT }}"
    volumes:
      - /home/{{ default_user }}/{{ CONTAINER_NAME }}/mongod.conf:/etc/mongo/mongod.conf
      - '{{ CONTAINER_NAME }}_data:/data/db'
      - /home/{{ default_user }}/{{ CONTAINER_NAME }}/certificates/:/etc/mongo/certificates
  when: CONTAINER_STATE != 'absent'
  tags:
  - asbrl-mongodb

- name: MongoDB INIT DB and Credentials
  mongodb_user:
    login_port: "{{ NET_PORT }}"
    login_user: "{{ ROOT_USERNAME }}"
    login_password: "{{ ROOT_PASSWORD }}"
    database: "{{ INIT_USER_DB }}"
    name: "{{ INIT_USER_NAME }}"
    password: "{{ INIT_USER_PASS }}"
    roles: "{{ INIT_USER_ROLE }}"
    state: present
  when: CONTAINER_STATE != 'absent' and INIT_USER_DB != '' and INIT_USER_NAME != '' and INIT_USER_PASS != ''
  tags:

  - asbrl-mongodb

- name: Add node as a Secondary to existing Replica Set
  command:
    argv:
      - sh
      - '-c'
      - mongo -u'{{ MASTER_USERNAME }}' -p'{{ MASTER_PASSWORD }}' --host '{{ MASTER_IP }}:{{ MASTER_PORT }}' --eval 'rs.add({host:"{{ SERVER_IP }}:{{ NET_PORT }}",priority:0,votes:0})' --authenticationDatabase admin
  when: REPLICA == 'secondary' and CONTAINER_STATE != 'absent'
  tags: 
  - asbrl-mongodb

# - name: Add node as a Secondary to existing Replica Set
#   mongodb_shell:
#     login_host: "{{ MASTER_IP }}"
#     login_port: "{{ MASTER_PORT }}"
#     login_user: "{{ MASTER_USERNAME }}"
#     login_password: "{{ MASTER_PASSWORD }}"
#     eval: "rs.add({host:'{{ SERVER_IP }}:{{ NET_PORT }}',priority:1,votes:1})"
#   when: REPLICA == 'secondary' and CONTAINER_STATE != 'absent'
#   tags:
#   - asbrl-mongodb