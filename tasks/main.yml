---
- name: Create MongoDB directory
  file:
    path: /home/{{default_user}}/{{ CONTAINER_NAME }}/certificates
    state: directory  

- name: MongoDB Data Volume
  docker_volume:
    name: "{{ CONTAINER_NAME }}_data"
    state: "{{ VOLUME_STATE }}"

- name: MongoDB config file
  template:
    src: mongod.conf.j2
    dest: /home/{{default_user}}/{{ CONTAINER_NAME }}/mongod.conf    

- name: MongoDB
  docker_container:
    name: "{{ CONTAINER_NAME }}"
    image: "mongo:{{ BUILD }}"
    command: 
      - -f /etc/mongo/mongod.conf
    pull: "true"
    recreate: "yes"
    env:
      MONGO_INITDB_ROOT_USERNAME: "{{ ROOT_USERNAME }}"
      MONGO_INITDB_ROOT_PASSWORD: "{{ ROOT_PASSWORD }}"
    cpu_period: "{{ DOCKER_CPU_PERIOD }}"
    cpu_quota: "{{ DOCKER_CPU_QUOTA }}"
    memory: "{{ DOCKER_MEMORY }}"
    state: "{{ CONTAINER_STATE }}"
    log_driver: "{{ DOCKER_LOG_DRIVER }}"
    log_options: "{{ DOCKER_LOG_OPTIONS }}"
    restart_policy: "unless-stopped"
    published_ports:
      - "0.0.0.0:{{ NET_PORT }}:{{ NET_PORT }}"
    volumes:
      - /home/{{default_user}}/{{ CONTAINER_NAME }}/mongod.conf:/etc/mongo/mongod.conf
      - '{{ CONTAINER_NAME }}_data:/data/db'
      - /home/{{default_user}}/{{ CONTAINER_NAME }}/certificates/:/etc/mongo/certificates
      - /home/{{default_user}}/{{ CONTAINER_NAME }}/set-rs-standalone.sh:/etc/mongo/set-rs-standalone.sh

- name: Wait until MongoDB is running
  wait_for:
    port: "{{ NET_PORT }}"
    delay: 5
  when: SET_REPLICA_STANDALONE and CONTAINER_STATE != 'absent'

- name: Config MongoDB Standalone Replica Set 
  command: 
    argv: 
      - docker 
      - exec 
      - "{{ CONTAINER_NAME }}"
      - sh 
      - '-c'
      - mongo --eval 'rs.initiate({_id:"{{REPLICATION_NAME}}",version:1,members:[{_id:0,host:"localhost:{{NET_PORT}}"}]})'
  ignore_errors: yes
  when: SET_REPLICA_STANDALONE and CONTAINER_STATE != 'absent' 

- name: Setting Replica Set ClusterAdmin
  command: 
   argv: 
      - docker 
      - exec 
      - "{{ CONTAINER_NAME }}"
      - sh 
      - '-c'
      - mongo --eval 'db.getSiblingDB("admin").createUser({"user":"{{ROOT_USERNAME}}","pwd":"{{ROOT_PASSWORD}}",roles:[{role:"userAdminAnyDatabase",db:"admin"},{"role":"clusterAdmin","db":"admin"}]})'
  ignore_errors: yes
  when: SET_REPLICA_STANDALONE and CONTAINER_STATE != 'absent' 

- name: MongoDB INIT DB and Credentials
  command: 
    argv: 
      - docker 
      - exec 
      - "{{ CONTAINER_NAME }}"
      - sh 
      - '-c'
      - mongo -u'{{ROOT_USERNAME}}' -p'{{ROOT_PASSWORD}}' --eval 'db.getSiblingDB("{{INIT_USER_DB}}").createUser({"user":"{{INIT_USER_NAME}}","pwd":"{{INIT_USER_PASS}}",roles:[{role:"{{INIT_USER_ROLE}}",db:"{{INIT_USER_DB}}"}]})'
  ignore_errors: yes
  when: CONTAINER_STATE != 'absent' and INIT_USER_DB != '' and INIT_USER_NAME != '' and INIT_USER_PASS != ''
